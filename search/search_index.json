{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Start","text":"<p>This package provides Python bindings to the peak picker from findMF.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install findmfpy\n</code></pre>"},{"location":"#reference","title":"Reference","text":""},{"location":"#findmfpy.pick_peaks","title":"findmfpy.pick_peaks","text":"<pre><code>pick_peaks(\n    mz_arr: numpy.typing.NDArray[numpy.float64],\n    int_arr: numpy.typing.NDArray[numpy.float64],\n    resolution: float = 10000.0,\n    width: float = 2.0,\n    int_width: float = 2.0,\n    int_threshold: float = 10.0,\n    area: bool = True,\n    max_peaks: int = 0,\n) -&gt; tuple[\n    numpy.typing.NDArray[numpy.float64],\n    numpy.typing.NDArray[numpy.float64],\n]\n</code></pre> <p>Picks peaks from a mass spectrum.</p> <p>Parameters:</p> Name Type Description Default <code>mz_arr</code> <code>numpy.typing.NDArray[numpy.float64]</code> <p>The m/z array.</p> required <code>int_arr</code> <code>numpy.typing.NDArray[numpy.float64]</code> <p>The intensity array.</p> required <code>resolution</code> <code>float</code> <p>The resolution of the instrument.</p> <code>10000.0</code> <code>width</code> <code>float</code> <p>The width of the peak.</p> <code>2.0</code> <code>int_width</code> <code>float</code> <p>The width of the intensity.</p> <code>2.0</code> <code>int_threshold</code> <code>float</code> <p>The intensity threshold.</p> <code>10.0</code> <code>area</code> <code>bool</code> <p>Whether to calculate the area instead of intensity.</p> <code>True</code> <code>max_peaks</code> <code>int</code> <p>The maximum number of peaks to return.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>0</code> <code>numpy.typing.NDArray[numpy.float64]</code> <p>The m/z array of the peaks.</p> <code>1</code> <code>numpy.typing.NDArray[numpy.float64]</code> <p>The intensity array of the peaks.</p>"},{"location":"#findmfpy.pick_peaks_diagnostic","title":"findmfpy.pick_peaks_diagnostic","text":"<pre><code>pick_peaks_diagnostic(\n    mz_arr: numpy.typing.NDArray[numpy.float64],\n    int_arr: numpy.typing.NDArray[numpy.float64],\n    resolution: float = 10000.0,\n    width: float = 2.0,\n    int_width: float = 2.0,\n    int_threshold: float = 10.0,\n    area: bool = True,\n    max_peaks: int = 0,\n) -&gt; tuple[\n    numpy.typing.NDArray[numpy.float64],\n    numpy.typing.NDArray[numpy.float64],\n    dict[str, numpy.typing.NDArray[numpy.float64]],\n]\n</code></pre> <p>Picks peaks from a mass spectrum, and returns some additional diagnostic information of the peak picker.</p> <p>Parameters:</p> Name Type Description Default <code>mz_arr</code> <code>numpy.typing.NDArray[numpy.float64]</code> <p>The m/z array.</p> required <code>int_arr</code> <code>numpy.typing.NDArray[numpy.float64]</code> <p>The intensity array.</p> required <code>resolution</code> <code>float</code> <p>The resolution of the instrument.</p> <code>10000.0</code> <code>width</code> <code>float</code> <p>The width of the peak.</p> <code>2.0</code> <code>int_width</code> <code>float</code> <p>The width of the intensity.</p> <code>2.0</code> <code>int_threshold</code> <code>float</code> <p>The intensity threshold.</p> <code>10.0</code> <code>area</code> <code>bool</code> <p>Whether to calculate the area instead of intensity.</p> <code>True</code> <code>max_peaks</code> <code>int</code> <p>The maximum number of peaks to return.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>0</code> <code>numpy.typing.NDArray[numpy.float64]</code> <p>The m/z array of the peaks.</p> <code>1</code> <code>numpy.typing.NDArray[numpy.float64]</code> <p>The intensity array of the peaks.</p> <code>2</code> <code>dict[str, numpy.typing.NDArray[numpy.float64]]</code> <p>Diagnostic information from the peak picker internals.</p>"}]}